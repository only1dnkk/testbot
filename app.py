from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup, ChatMemberAdministrator, ChatMemberRestricted
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramRetryAfter
from aiogram import types

from handlers.promo import ActivatePromoCommand, create_promo_handler
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton

from handlers.promo import ActivatePromoCommand, create_promo_handler
from handlers.market import market_command, process_sell_price
from handlers.backup import backup_database, restore_database
from handlers.albums import check_albums_command
from handlers.help import help_command
from handlers.rules import rules_command
from handlers.sendbug import send_bug_command, answer_to_user
from handlers.jobs import job_command
from handlers.rating import show_rating

from datetime import datetime, timedelta
import asyncio
import logging
import time
import random
from utils import config
from utils.sql import DateBase
from utils.ftl import FluentLocalization
from handlers.albums import router as albums_router

bot = Bot(token=config.TOKEN, default=DefaultBotProperties(parse_mode='html', link_preview_is_disabled=True))
router = Router()
db = DateBase()

class SearchStates(StatesGroup):
    waiting_for_search = State()

async def GetCardsCommand(message: types.Message, text, db):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    last_use = await db.cmd(f"SELECT last_card_time FROM users WHERE UserID={message.from_user.id}")
    if last_use and last_use[0][0]:
        last_time = datetime.fromisoformat(last_use[0][0])
        time_passed = datetime.now() - last_time
        if time_passed < timedelta(hours=12):
            remaining = timedelta(hours=12) - time_passed
            hours = remaining.seconds // 3600
            minutes = (remaining.seconds % 3600) // 60
            await message.reply(f"üê∞ –§—Ä—Ä... –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {hours} —á. {minutes} –º–∏–Ω. –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É!")
            return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cards = await db.get_lists(tables='cards', table='CardsID')
    my_cards = await db.cmd(f"SELECT CardsID FROM my_cards WHERE UserID={message.from_user.id}")
    my_cards = [card[0] for card in my_cards] if my_cards else []
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    available_cards = [card[0] for card in cards if card[0] not in my_cards]
    
    if not available_cards:
        await message.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã!")
        return
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É
    while True:
        randoms = ['Common', 'Common', 'Common', 'Common', 'Common', 'Common', 'Common', 'Common',  # 8 Common - 50%
                  'Rare', 'Rare', 'Rare', 'Rare',  # 4 Rare - 25%
                  'Epic', 'Epic', 'Epic',  # 3 Epic - 18.75%
                  'Legendary']  # 1 Legendary - 6.25%
        pol_random = random.choice(randoms)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        get_cards = await db.cmd(f"""
            SELECT c.* FROM cards c
            WHERE c.CardsStatus='{pol_random}' 
            AND c.CardsID NOT IN (
                SELECT CardsID FROM my_cards WHERE UserID={message.from_user.id}
            )
            ORDER BY RANDOM() LIMIT 1
        """)

        if get_cards:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            await db.cmd(f"""
                UPDATE users 
                SET last_card_time = '{datetime.now().isoformat()}' 
                WHERE UserID = {message.from_user.id}
            """)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await db.cmd(f"INSERT INTO my_cards (CardsID, UserID) VALUES ({get_cards[0][0]}, {message.from_user.id})")
            await message.reply_photo(
                photo=get_cards[0][4],
                caption=f"üíø {get_cards[0][2]} - {get_cards[0][3]}\n\n"
                        f"üê∞üí≠ –î–µ—Ä–∂–∏ –∫–∞—Ä—Ç–æ—á–∫—É, —Ñ—Ä—Ä.. –û–Ω–∞ —É–∂–µ –≤ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!\n\n"
                        f"‚ú® –†–µ–¥–∫–æ—Å—Ç—å: {config.CardsStatus[pol_random]['Emoji']} ({config.CardsStatus[pol_random]['Ru-Name']})\n\n"
                        f"<b><a href='https://t.me/lair_music'>SATURN CHANNEL</a></b>"
            )
            break
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–∞—Ä—Ç—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
            continue

async def MyCardsCommand(message: types.Message, text, db, search_query=None):
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –ø–æ–∏—Å–∫–∞
    if search_query:
        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_cards = await db.cmd(f"""
            SELECT c.* 
            FROM cards c
            JOIN my_cards mc ON c.CardsID = mc.CardsID
            WHERE mc.UserID = {message.from_user.id}
            ORDER BY c.CardsID
        """)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        cards = []
        search_query = search_query.lower()
        for card in all_cards:
            if (search_query in card[2].lower() or  # CardsAUTHOR
                search_query in card[3].lower()):   # CardsNAME
                cards.append(card)
    else:
        # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –∑–∞–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cards = await db.cmd(f"""
            SELECT c.* 
            FROM cards c
            JOIN my_cards mc ON c.CardsID = mc.CardsID
            WHERE mc.UserID = {message.from_user.id}
            ORDER BY c.CardsID
        """)

    if not cards:
        if search_query:
            await message.reply("üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await message.reply(text.format_value('no-cards'))
        return

    page = 0
    info = {
        'CardsID': cards[page][0],
        'CardsStatus': cards[page][1],
        'CardsAUTHOR': cards[page][2],
        'CardsNAME': cards[page][3],
        'CardsURL': cards[page][4],
        'CardsDesc': cards[page][5] if len(cards[page]) > 5 else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    }

    my_cards = InlineKeyboardBuilder()
    
    # First row - navigation
    if page > 0:
        my_cards.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cards_page:{page-1}:{message.from_user.id}")
    my_cards.button(text=f"üìÑ {page + 1}/{len(cards)}", callback_data=f"page:{message.from_user.id}")
    if page < len(cards) - 1:
        my_cards.button(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"cards_page:{page+1}:{message.from_user.id}")
    
    # Second row - search
    my_cards.button(text="üîç –ü–æ–∏—Å–∫", callback_data=f"search_cards:{message.from_user.id}")
    
    # Third row - rarity
    my_cards.button(
        text=f"{config.CardsStatus[info['CardsStatus']]['Emoji']} {config.CardsStatus[info['CardsStatus']]['Ru-Name']}", 
        callback_data=f"show_desc:{page}:{message.from_user.id}"
    )
    
    my_cards.adjust(3, 1, 1)
    
    if search_query:
        card_text = f"üíø {info['CardsAUTHOR']} - {info['CardsNAME']}\n\n"
        card_text += f"üê∞ –§—Ä—Ä, –Ω–∞—à—ë–ª –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É \"{search_query}\""
    else:
        # –ü–æ–¥—Å—á–µ—Ç –∫–∞—Ä—Ç –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        rarity_counts = {
            'Legendary': 0,
            'Epic': 0, 
            'Rare': 0,
            'Common': 0
        }
        
        for card in cards:
            rarity_counts[card[1]] += 1
        
        total_cards = len(cards)
        
        card_text = f"üíø {info['CardsAUTHOR']} - {info['CardsNAME']}\n\n"
        card_text += f"{config.CardsStatus['Legendary']['Emoji']} {config.CardsStatus['Legendary']['Ru-Name']}: {rarity_counts['Legendary']}\n"
        card_text += f"{config.CardsStatus['Epic']['Emoji']} {config.CardsStatus['Epic']['Ru-Name']}: {rarity_counts['Epic']}\n"
        card_text += f"{config.CardsStatus['Rare']['Emoji']} {config.CardsStatus['Rare']['Ru-Name']}: {rarity_counts['Rare']}\n"
        card_text += f"{config.CardsStatus['Common']['Emoji']} {config.CardsStatus['Common']['Ru-Name']}: {rarity_counts['Common']}\n"
        card_text += f"–í—Å–µ–≥–æ: {total_cards}\n\n"
        card_text += f"üê∞ –§—Ä—Ä, —ç—Ç–æ –≤—Å—è —Ç–≤–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è!"
    
    await message.reply_photo(
        photo=info['CardsURL'],
        caption=card_text,
        reply_markup=my_cards.as_markup()
    )

async def StartCommand(message: types.Message, text):
    if message.chat.id != message.from_user.id:
        return await message.reply(text.format_value('start-2'))
    await message.reply(text.format_value('start'), reply_markup=ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text=f"ü•ï –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É"),
         KeyboardButton(text=f"ü•¨ –ú–æ–∏ –∫–∞—Ä—Ç—ã")
        ]
    ], resize_keyboard=True))

@router.message(F.text)
async def messages(message: types.Message, state: FSMContext, text: FluentLocalization):
    user = await db.get_user('users', message.from_user.id)
    if user == 'unregister':
        await db.cmd(f"INSERT INTO users (UserID, last_card_time) VALUES ({message.from_user.id}, NULL)")
    
    current_state = await state.get_state()
    if current_state == "SearchStates:waiting_for_search":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        search_query = message.text.lower()
        await MyCardsCommand(message, text, db, search_query)
        await state.clear()
        return

    if current_state == "waiting_for_price":
        await process_sell_price(message, state)
        return
        
    UserID = message.from_user.id
    username = message.from_user.username
    ChatID = message.chat.id
    DataBot = await bot.get_me()
    data = await db.get_user('users', UserID)
    UserNameBot = DataBot.username
    command = message.text.lower().split('@')[0]  # –ë–µ—Ä–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞ –±–æ—Ç–∞
    await db.cmd(f"UPDATE users SET Username='@{message.from_user.username}' WHERE UserID={UserID}")
    await db.cmd(f"UPDATE market SET SellerUsername='@{message.from_user.username}' WHERE SellerID={UserID}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å–±–æ–º—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    user_cards = await db.cmd(f"SELECT CardsID FROM my_cards WHERE UserID = {UserID}")
    user_cards = [card[0] for card in user_cards] if user_cards else []
    
    completed_albums = await db.cmd(f"SELECT AlbumID FROM my_album WHERE UserID = {UserID}")
    if completed_albums:
        for album in completed_albums:
            album_id = album[0]
            album_cards = await db.cmd(f"SELECT RequiredCards FROM album_list WHERE AlbumID = {album_id}")
            if album_cards:
                required_cards = [int(card_id) for card_id in album_cards[0][0].split(',')]
                missing_cards = [card_id for card_id in required_cards if card_id not in user_cards]
                
                if missing_cards:
                    await db.cmd(f"DELETE FROM my_album WHERE UserID = {UserID} AND AlbumID = {album_id}")
                    await message.reply(f"‚ùå –ê–ª—å–±–æ–º –±—ã–ª –∏–∑—ä—è—Ç –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞—Ä—Ç!")

    if command in ['/start', 'ü•¨ –º–æ–∏ –∫–∞—Ä—Ç—ã']:
        await StartCommand(message=message, text=text)
    if command in ['/my_cards', 'ü•¨ –º–æ–∏ –∫–∞—Ä—Ç—ã']:
        await MyCardsCommand(message=message, text=text, db=db)
    if command in ['/get_cards', 'ü•ï –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É']:
        await GetCardsCommand(message=message, text=text, db=db)
    if command in ['/bal', 'üí∞ –º–æ–∏ –º–æ–Ω–µ—Ç—ã']:
        await message.reply(f"üí∞ –£ —Ç–µ–±—è {data['coins']} –º–æ–Ω–µ—Ç")
    elif command.lower().startswith('/promo'):
        await ActivatePromoCommand(message=message)
    elif command.lower().startswith('/createpromo'):
        await create_promo_handler(message=message)
    if command in ['/shop', 'üè™ —Ä—ã–Ω–æ–∫']:
        await market_command(message=message)
    if command in ['/backup', 'üíæ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è'] and UserID in config.ADMINS:
        await backup_database(message=message, db=db, bot=bot, text=text)
    if command.startswith('/restore') and UserID in config.ADMINS:
        await restore_database(message=message, db=db, bot=bot, text=text)
    if command in ['/albums', 'üìö –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å–±–æ–º–æ–≤']:
        await check_albums_command(message=message)
    if command == '/help':
        await help_command(message=message)
    if command == '/rules':
        await rules_command(message=message)
    if command.startswith('/sendbug'):
        await send_bug_command(message=message)
    if command.startswith('/ans'):
        await answer_to_user(message=message)
    if command in ['/work', 'üíº —Ä–∞–±–æ—Ç–∞']:
        await job_command(message=message, state=state)
    if command in ['/rating', 'üèÜ —Ä–µ–π—Ç–∏–Ω–≥']:
        await show_rating(message=message)

@router.callback_query(F.data.startswith("cards_page:"))
async def cards_page_handler(callback: types.CallbackQuery, text: FluentLocalization):
    page = int(callback.data.split(":")[1])
    user_id = int(callback.data.split(":")[2])
    
    if callback.from_user.id != user_id:
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cards = await db.cmd(f"""
        SELECT c.* 
        FROM cards c
        JOIN my_cards mc ON c.CardsID = mc.CardsID
        WHERE mc.UserID = {callback.from_user.id}
        ORDER BY c.CardsID
    """)
    
    if not cards:
        await callback.answer(text.format_value('no-cards'))
        return
        
    if page >= len(cards):
        page = 0
        
    info = {
        'CardsID': cards[page][0],
        'CardsStatus': cards[page][1],
        'CardsAUTHOR': cards[page][2],
        'CardsNAME': cards[page][3],
        'CardsURL': cards[page][4],
        'CardsDesc': cards[page][5] if len(cards[page]) > 5 else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    }

    # –ü–æ–¥—Å—á–µ—Ç –∫–∞—Ä—Ç –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity_counts = {
        'Legendary': 0,
        'Epic': 0,
        'Rare': 0,
        'Common': 0
    }
    
    for card in cards:
        rarity_counts[card[1]] += 1
        
    total_cards = len(cards)
    
    my_cards = InlineKeyboardBuilder()
    
    # First row - navigation
    if page > 0:
        my_cards.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cards_page:{page-1}:{user_id}")
    my_cards.button(text=f"üìÑ {page + 1}/{len(cards)}", callback_data=f"page:{user_id}")
    if page < len(cards) - 1:
        my_cards.button(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"cards_page:{page+1}:{user_id}")
    
    # Second row - search
    my_cards.button(text="üîç –ü–æ–∏—Å–∫", callback_data=f"search_cards:{user_id}")
    
    # Third row - rarity and sell
    my_cards.button(
        text=f"{config.CardsStatus[info['CardsStatus']]['Emoji']} {config.CardsStatus[info['CardsStatus']]['Ru-Name']}", 
        callback_data=f"show_desc:{page}:{user_id}"
    )
    
    my_cards.adjust(3, 1, 1)
    
    card_text = f"üíø {info['CardsAUTHOR']} - {info['CardsNAME']}\n\n"
    card_text += f"{config.CardsStatus['Legendary']['Emoji']} {config.CardsStatus['Legendary']['Ru-Name']}: {rarity_counts['Legendary']}\n"
    card_text += f"{config.CardsStatus['Epic']['Emoji']} {config.CardsStatus['Epic']['Ru-Name']}: {rarity_counts['Epic']}\n"
    card_text += f"{config.CardsStatus['Rare']['Emoji']} {config.CardsStatus['Rare']['Ru-Name']}: {rarity_counts['Rare']}\n"
    card_text += f"{config.CardsStatus['Common']['Emoji']} {config.CardsStatus['Common']['Ru-Name']}: {rarity_counts['Common']}\n"
    card_text += f"–í—Å–µ–≥–æ: {total_cards}\n\n"
    card_text += f"üê∞ –§—Ä—Ä, —ç—Ç–æ –≤—Å—è —Ç–≤–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è!"
    
    await callback.message.edit_media(
        types.InputMediaPhoto(
            media=info['CardsURL'],
            caption=card_text
        ),
        reply_markup=my_cards.as_markup()
    )

router.include_router(albums_router)