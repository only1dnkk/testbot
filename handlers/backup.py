from aiogram import types
from datetime import datetime
import json
import os
import asyncio
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils import config
import aiosqlite
import platform
import sys
import aiohttp
backup_data = {
                'users': [],  # [UserID, username, ref, UUID, balance, rubl, level, plus, plus_time, expi, expi_nado, bonus_cd, bonus_id, bonus_days, keys, bank_kredit, eterlit]
                'cards': [], # [id, rarity, artist, name, image, description]
                'market': [], # [user_id, card_id, price]
                'promos': [], # [id, code, uses_left, type, amount, expires]
                'my_cards': [] # [user_id, card_id]
            }

async def backup_database(message, db, bot, text):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫—Ä–æ–º–µ –∏–≥—Ä–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
    """

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    for key in backup_data:
        backup_data[key] = []

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    async with aiosqlite.connect('Users.db') as db:
        db.row_factory = aiosqlite.Row
        for table in backup_data.keys():
            async with db.execute(f"SELECT * FROM {table}") as cursor:
                rows = await cursor.fetchall()
                if rows:
                    for row in rows:
                        backup_data[table].append(dict(row))

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ utils/logs
    os.makedirs('utils/logs', exist_ok=True)
    backup_path = f'utils/logs/backup_{message.from_user.id}.json'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    with open(backup_path, 'w', encoding='utf-8') as f:
        json.dump(backup_data, f, ensure_ascii=False, indent=4)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
    with open(backup_path, 'rb') as f:
        file_id = await message.reply_document(
            document=types.FSInputFile(backup_path),
            caption=f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã "
        )
        await file_id.edit_caption(caption=f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –æ—Ç {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nFile ID: {file_id.document.file_id}")

    os.remove(backup_path)


async def restore_database(message, db, bot, text):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
    if not message.text.startswith('/restore '):
        return await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏\n–ü—Ä–∏–º–µ—Ä: /restore BQACAgI****")

    file_id = message.text.split(' ')[1]
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        import os
        import json
        import aiosqlite
        from datetime import datetime
        
        temp_path = f'utils/logs/restore_{message.from_user.id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        os.makedirs('utils/logs', exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, temp_path)
        
        # –ß–∏—Ç–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open(temp_path, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        async with aiosqlite.connect('Users.db') as conn:
            for table in backup_data:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                cursor = await conn.execute(f"PRAGMA table_info({table})")
                table_columns = [col[1] for col in await cursor.fetchall()]

                # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
                await conn.execute(f"DELETE FROM {table}")
                await conn.commit()
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞
                for row in backup_data[table]:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∫–∞–∫ –∫–ª—é—á–∞–º–∏
                    row_dict = {str(i): val for i, val in enumerate(row)}
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                    filtered_row = {str(i): v for i, v in row_dict.items() if i < len(table_columns)}
                    
                    if filtered_row:
                        columns = ', '.join(table_columns[:len(filtered_row)])
                        values = tuple(filtered_row.values())
                        placeholders = ', '.join(['?' for _ in values])
                        
                        await conn.execute(
                            f"INSERT OR REPLACE INTO {table} ({columns}) VALUES ({placeholders})",
                            values
                        )
                await conn.commit()

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_path)
                
        await message.reply("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
        print(f"Restore error: {str(e)}")