from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.sql import DateBase
from datetime import datetime
from utils import config
router = Router()
db = DateBase()

@router.callback_query(F.data == "activate_promo")
async def activate_promo_handler(callback: types.CallbackQuery):
    await callback.message.reply("üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    await callback.answer()

async def ActivatePromoCommand(message: types.Message):
    if message.text.startswith("/promo"):
        promo_code = message.text.split()[1] if len(message.text.split()) > 1 else None
    else:
        promo_code = message.text
    
    if not promo_code:
        await message.reply("üê∞ <b>–≠–π! –¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\nüî∏ –ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: /promo [–∫–æ–¥]")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ
    promo = await db.cmd(f"""
        SELECT * FROM promos 
        WHERE PromoCode = '{promo_code}' 
        AND (UsesLeft > 0 OR UsesLeft = -1)
        AND (ExpiryDate > '{datetime.now()}' OR ExpiryDate IS NULL)
    """)

    if not promo:
        await message.reply("‚ùå <b>–Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\nüî∏ –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    used = await db.cmd(f"""
        SELECT * FROM promo_uses 
        WHERE PromoID = {promo[0][0]} AND UserID = {message.from_user.id}
    """)

    if used:
        await message.reply("‚ö†Ô∏è <b>–≠–π! –ù–µ –ø—ã—Ç–∞–π—Å—è –æ–±—Ö–∏—Ç—Ä–∏—Ç—å!</b>\n\nüî∏ –¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
        return

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    reward_type = promo[0][3] 
    reward_amount = promo[0][4] 
    if reward_type == "coins":
        # –í—ã–¥–∞–µ–º –º–æ–Ω–µ—Ç—ã
        await db.cmd(f"""
            UPDATE users 
            SET coins = coins + {reward_amount} 
            WHERE UserID = {message.from_user.id}
        """)

    # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await db.cmd(f"""
        INSERT INTO promo_uses (PromoID, UserID) 
        VALUES ({promo[0][0]}, {message.from_user.id})
    """)

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    if promo[0][2] > 0:  # –µ—Å–ª–∏ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π (-1)
        await db.cmd(f"""
            UPDATE promos 
            SET UsesLeft = UsesLeft - 1 
            WHERE PromoID = {promo[0][0]}
        """)

    await message.reply(f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\nüíé –ù–∞–≥—Ä–∞–¥–∞: {reward_amount} {reward_type}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

async def create_promo_handler(message: types.Message):
    if message.from_user.id not in config.ADMINS:  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        return
        
    args = message.text.split()[1:]
    if len(args) < 4:
        await message.reply(
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
            "üî∏ –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "/createpromo [–∫–æ–¥] [–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è] [—Ç–∏–ø_–Ω–∞–≥—Ä–∞–¥—ã] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [—Å—Ä–æ–∫_–¥–µ–π—Å—Ç–≤–∏—è]\n\n"
            "üìå –ü—Ä–∏–º–µ—Ä:\n"
            "/createpromo COINS500 -1 coins 500 2024-12-31\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            parse_mode=None
        )
        return

    code, uses, reward_type, amount = args[:4]
    expiry = args[4] if len(args) > 4 else None

    await db.cmd(f"""
        INSERT INTO promos (PromoCode, UsesLeft, RewardType, RewardAmount, ExpiryDate)
        VALUES ('{code}', {uses}, '{reward_type}', {amount}, {'NULL' if not expiry else f"'{expiry}'"})
    """)

    await message.reply(f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\nüéÅ –ö–æ–¥: {code}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", parse_mode=None)

