from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.sql import DateBase
from datetime import datetime
from aiogram.filters import Command
from utils import config
from aiogram import Bot, DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
bot = Bot(token=config.TOKEN, default=DefaultBotProperties(parse_mode='html', link_preview_is_disabled=True))
router = Router()
db = DateBase()

ITEMS_PER_PAGE = 8  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

class SearchStates2(StatesGroup):
    waiting_for_search_market = State()

@router.callback_query(F.data.startswith("sell_card:"))
async def sell_card_handler(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ä—Ç—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    data = callback.data.split(":")
    card_id = int(data[1])
    owner_id = int(data[2])
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–Ω–æ–ø–∫–∏
    if user_id != owner_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π
    card = await db.cmd(f"""
        SELECT c.* FROM cards c
        JOIN my_cards mc ON c.CardsID = mc.CardsID 
        WHERE mc.UserID = {user_id} AND c.CardsID = {card_id}
    """)

    if not card:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç—ã!", show_alert=True)
        return

    await state.update_data(card_id=card_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
    card_status = card[0][3]
    status_info = config.CardsStatus.get(card_status, {})
    status_emoji = status_info.get('Emoji', '')
    status_ru = status_info.get('Ru-Name', card_status)
    
    await callback.message.edit_text(
        text=f"üí´ –†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã: {status_emoji} {status_ru}\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∫–∞—Ä—Ç—É (–æ—Ç 1 –¥–æ 50.000 –º–æ–Ω–µ—Ç):",
        reply_markup=None
    )
    await state.set_state("waiting_for_price")
    await callback.answer()

async def process_sell_price(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != "waiting_for_price":
        return

    try:
        price = int(message.text)
        if price <= 0:
            await message.reply("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
        if price > 50000:
            await message.reply("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ - 50.000 –º–æ–Ω–µ—Ç!")
            return
            
        data = await state.get_data()
        card_id = data["card_id"]
        user_id = message.from_user.id
        username = message.from_user.username
        seller_username = f"@{username}" if username else str(user_id)

        # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        await db.cmd(f"""
            INSERT INTO market (SellerID, SellerUsername, CardsID, Price)
            VALUES ({user_id}, '{seller_username}', {card_id}, {price})
        """)

        # –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø—Ä–æ–¥–∞–≤—Ü–∞
        await db.cmd(f"DELETE FROM my_cards WHERE UserID = {user_id} AND CardsID = {card_id}")

        await message.reply("‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!")
        await state.clear()
        
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

@router.callback_query(F.data.startswith("buy_listing:"))
async def buy_listing_handler(callback: types.CallbackQuery):
    data = callback.data.split(":")
    listing_id = int(data[1])
    owner_id = int(data[2])
    buyer_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–Ω–æ–ø–∫–∏
    if buyer_id != owner_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ –∏ –∫–∞—Ä—Ç–µ
    listing = await db.cmd(f"""
        SELECT m.*, c.CardsAUTHOR, c.CardsNAME, c.CardsStatus
        FROM market m
        JOIN cards c ON m.CardsID = c.CardsID
        WHERE m.ListingID = {listing_id}
    """)

    if not listing:
        await callback.answer("‚ùå –≠—Ç–æ—Ç –ª–æ—Ç —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    if buyer_id == listing[0][1]:
        kb.button(text="‚ùå –£–±—Ä–∞—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏", callback_data=f"remove_listing:{listing_id}:{owner_id}")
    else:
        kb.button(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"confirm_buy:{listing_id}:{owner_id}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"market:0:{owner_id}")
    kb.adjust(1)

    seller_name = listing[0][2]  # –ë–µ—Ä–µ–º SellerUsername –∏–∑ —Ç–∞–±–ª–∏—Ü—ã market
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
    card_status = listing[0][8]
    status_info = config.CardsStatus.get(card_status, {})
    status_emoji = status_info.get('Emoji', '')
    status_ru = status_info.get('Ru-Name', card_status)

    await callback.message.edit_text(
        text=f"üé´ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: {listing[0][6]} - {listing[0][7]}\n"
             f"üê∞ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}\n"
             f"üí´ –†–µ–¥–∫–æ—Å—Ç—å: {status_emoji} {status_ru}\n"
             f"üí∏ –¶–µ–Ω–∞: {listing[0][4]} –º–æ–Ω–µ—Ç",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("remove_listing:"))
async def remove_listing_handler(callback: types.CallbackQuery):
    data = callback.data.split(":")
    listing_id = int(data[1])
    owner_id = int(data[2])
    user_id = callback.from_user.id

    if user_id != owner_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ
    listing = await db.cmd(f"SELECT * FROM market WHERE ListingID = {listing_id}")
    if not listing or listing[0][1] != user_id:
        await callback.answer("‚ùå –≠—Ç–æ—Ç –ª–æ—Ç —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!", show_alert=True)
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—Ä–æ–¥–∞–≤—Ü–∞
    await db.cmd(f"""
        INSERT INTO my_cards (UserID, CardsID) 
        VALUES ({user_id}, {listing[0][3]})
    """)
    await db.cmd(f"DELETE FROM market WHERE ListingID = {listing_id}")

    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"market:0:{owner_id}")
    
    await callback.message.edit_text(
        text="‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂–∏!",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_buy:"))
async def confirm_buy_handler(callback: types.CallbackQuery):
    data = callback.data.split(":")
    listing_id = int(data[1])
    owner_id = int(data[2])
    buyer_id = callback.from_user.id

    if buyer_id != owner_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ
    listing = await db.cmd(f"SELECT * FROM market WHERE ListingID = {listing_id}")
    if not listing:
        await callback.answer("‚ùå –≠—Ç–æ—Ç –ª–æ—Ç —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!", show_alert=True)
        return

    seller_id = listing[0][1]
    card_id = listing[0][3]  # CardsID
    price = listing[0][4]    # Price

    if buyer_id == seller_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–≤–æ—é –∂–µ –∫–∞—Ä—Ç—É!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ä—Ç–∞ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    existing_card = await db.cmd(f"""
        SELECT * FROM my_cards 
        WHERE UserID = {buyer_id} AND CardsID = {card_id}
    """)
    
    if existing_card:
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ –∫–∞—Ä—Ç–∞!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    buyer = await db.get_user('users', buyer_id)
    if buyer['coins'] < price:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", show_alert=True)
        return

    # –ü—Ä–æ–≤–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await db.cmd(f"UPDATE users SET coins = coins - {price} WHERE UserID = {buyer_id}")
    await db.cmd(f"UPDATE users SET coins = coins + {price} WHERE UserID = {seller_id}")
    await db.cmd(f"INSERT INTO my_cards (UserID, CardsID) VALUES ({buyer_id}, {card_id})")
    await db.cmd(f"DELETE FROM market WHERE ListingID = {listing_id}")

    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"market:0:{buyer_id}")
    
    await callback.message.edit_text(
        text=f"‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞ –∑–∞ {price} –º–æ–Ω–µ—Ç!",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("market:"))
async def show_market(callback: types.CallbackQuery):
    data = callback.data.split(":")
    page = int(data[1])
    user_id = int(data[2])
    
    if callback.from_user.id != user_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    offset = page * ITEMS_PER_PAGE
    listings = await db.cmd(f"""
        SELECT m.ListingID, m.Price, c.CardsAUTHOR, c.CardsNAME, c.CardsStatus, m.SellerUsername
        FROM market m
        JOIN cards c ON m.CardsID = c.CardsID
        ORDER BY m.ListedAt DESC
        LIMIT {ITEMS_PER_PAGE} OFFSET {offset}
    """)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
    total_listings = await db.cmd("SELECT COUNT(*) FROM market")
    total_pages = (total_listings[0][0] + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    market = InlineKeyboardBuilder()
    
    if not listings:
        await callback.message.edit_text(
            text="üè™ –†—ã–Ω–æ–∫ –ø—É—Å—Ç\n–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã—Å—Ç–∞–≤–∏–ª –∫–∞—Ä—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
            reply_markup=market.as_markup()
        )
        return

    for listing in listings:
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
        status_info = config.CardsStatus.get(listing[4], {})
        status_emoji = status_info.get('Emoji', '')
        status_ru = status_info.get('Ru-Name', listing[4])
        
        market.button(
            text=f"{listing[2]} - {listing[3]} ({status_emoji} {status_ru}) ({listing[1]} üí∞)\n{listing[5]}", 
            callback_data=f"buy_listing:{listing[0]}:{user_id}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(("‚¨ÖÔ∏è", f"market:{page-1}:{user_id}"))
    if page < total_pages - 1:
        nav_buttons.append(("‚û°Ô∏è", f"market:{page+1}:{user_id}"))
    
    for text, callback_data in nav_buttons:
        market.button(text=text, callback_data=callback_data)
        
    market.button(
        text="üì§ –í—ã—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É",
        callback_data=f"list_cards_for_sale:0:{user_id}"
    )
    
    market.adjust(1)
    
    await callback.message.edit_text(
        text=f"üè™ –†—ã–Ω–æ–∫ –∫–∞—Ä—Ç (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=market.as_markup()
    )
    await callback.answer()

async def market_command(message: types.Message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–æ–≤
    listings = await db.cmd(f"""
        SELECT m.ListingID, m.Price, c.CardsAUTHOR, c.CardsNAME, c.CardsStatus, c.CardsURL, m.SellerUsername
        FROM market m
        JOIN cards c ON m.CardsID = c.CardsID
        ORDER BY m.ListedAt DESC
        LIMIT {ITEMS_PER_PAGE}
    """)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
    total_listings = await db.cmd("SELECT COUNT(*) FROM market")
    total_pages = (total_listings[0][0] + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    market = InlineKeyboardBuilder()
    
    if not listings:
        market.button(
            text="üì§ –í—ã—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
            callback_data=f"list_cards_for_sale:0:{user_id}"
        )
        await message.reply(
            "üè™ –†—ã–Ω–æ–∫ –ø—É—Å—Ç\n–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã—Å—Ç–∞–≤–∏–ª –∫–∞—Ä—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
            reply_markup=market.as_markup()
        )
        return

    for listing in listings:
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
        status_info = config.CardsStatus.get(listing[4], {})
        status_emoji = status_info.get('Emoji', '')
        status_ru = status_info.get('Ru-Name', listing[4])
        
        market.button(
            text=f"{listing[2]} - {listing[3]} ({listing[1]}üí∞)\n{listing[6]}", 
            callback_data=f"buy_listing:{listing[0]}:{user_id}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥" –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if total_pages > 1:
        market.button(text="‚û°Ô∏è", callback_data=f"market:1:{user_id}")
        
    market.button(
        text="üì§ –í—ã—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É",
        callback_data=f"list_cards_for_sale:0:{user_id}"
    )
    market.adjust(1)
    
    await message.reply(
        f"üè™ –†—ã–Ω–æ–∫ –∫–∞—Ä—Ç (–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{total_pages})\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=market.as_markup()
    )

@router.callback_query(F.data.startswith("list_cards_for_sale:"))
async def list_cards_for_sale(callback: types.CallbackQuery):
    data = callback.data.split(":")
    page = int(data[1])
    author_id = int(data[2])
    
    if callback.from_user.id != author_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    offset = page * ITEMS_PER_PAGE
    user_cards = await db.cmd(f"""
        SELECT c.CardsID, c.CardsAUTHOR, c.CardsNAME, c.CardsStatus, c.CardsURL
        FROM cards c
        JOIN my_cards mc ON c.CardsID = mc.CardsID
        WHERE mc.UserID = {callback.from_user.id}
        ORDER BY c.CardsStatus DESC
        LIMIT {ITEMS_PER_PAGE} OFFSET {offset}
    """)

    if not user_cards:
        if page == 0:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_cards = await db.cmd(f"""
        SELECT COUNT(*) FROM my_cards 
        WHERE UserID = {callback.from_user.id}
    """)
    total_pages = (total_cards[0][0] + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    cards_kb = InlineKeyboardBuilder()
    
    for card in user_cards:
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
        status_info = config.CardsStatus.get(card[3], {})
        status_emoji = status_info.get('Emoji', '')
        status_ru = status_info.get('Ru-Name', card[3])
        
        cards_kb.button(
            text=f"{card[1]} - {card[2]} ({status_emoji} {status_ru})",
            callback_data=f"sell_card:{card[0]}:{author_id}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(("‚¨ÖÔ∏è", f"list_cards_for_sale:{page-1}:{author_id}"))
    if page < total_pages - 1:
        nav_buttons.append(("‚û°Ô∏è", f"list_cards_for_sale:{page+1}:{author_id}"))
    
    for text, callback_data in nav_buttons:
        cards_kb.button(text=text, callback_data=callback_data)
    cards_kb.button(text="üîç –ü–æ–∏—Å–∫", callback_data=f"search_card_market:{author_id}")
    cards_kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"market:0:{author_id}")
    cards_kb.adjust(1)

    await callback.message.edit_text(
        text=f"üì§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):",
        reply_markup=cards_kb.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("back_to_market:"))
async def back_to_market(callback: types.CallbackQuery):
    author_id = int(callback.data.split(":")[1])
    if callback.from_user.id != author_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä—ã–Ω–∫–∞
    await show_market(callback)

@router.callback_query(F.data.startswith("search_card_market:"))
async def search_card_market(callback: types.CallbackQuery, state: FSMContext):
    author_id = int(callback.data.split(":")[1])
    if callback.from_user.id != author_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchStates2.waiting_for_search_market)
@router.message(SearchStates2.waiting_for_search_market)
async def search_card_market_handler(message: types.Message, state: FSMContext):
    search_query = message.text
    # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
    user_cards = await db.cmd(f"""
        SELECT * FROM cards 
        WHERE CardsNAME LIKE '%{search_query}%' AND CardsID IN (
            SELECT CardsID FROM my_cards WHERE UserID={message.from_user.id}
        )
    """)
    if not user_cards:
        await message.answer("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!")
        await state.clear()
        return

    cards_kb = InlineKeyboardBuilder()
    
    for card in user_cards:
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
        status_info = config.CardsStatus.get(card[3], {})
        status_emoji = status_info.get('Emoji', '')
        status_ru = status_info.get('Ru-Name', card[3])
        
        cards_kb.button(
            text=f"{card[1]} - {card[2]} ({status_emoji} {status_ru})",
            callback_data=f"sell_card:{card[0]}:{message.from_user.id}"
        )

    await message.answer(
        text="üì§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=cards_kb.as_markup()
    )
    await state.clear()