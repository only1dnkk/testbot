from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.sql import DateBase
from app import SearchStates
from utils import config

router = Router()
db=DateBase()

@router.callback_query(F.data.startswith("search_cards:"))
async def search_cards_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    
    if callback.from_user.id != user_id:
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        return
        
    await callback.message.reply("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchStates.waiting_for_search)
    await callback.answer()

@router.callback_query(F.data.startswith("show_desc:"))
async def show_desc_handler(callback: types.CallbackQuery):
    page = int(callback.data.split(":")[1])
    user_id = int(callback.data.split(":")[2])
    search_query = callback.data.split(":")[3] if len(callback.data.split(":")) > 3 else None
    
    if callback.from_user.id != user_id:
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        return
        
    if search_query:
        cards = await db.cmd(f"""
            SELECT c.* 
            FROM cards c
            JOIN my_cards mc ON c.CardsID = mc.CardsID
            WHERE mc.UserID = {callback.from_user.id}
            AND (LOWER(c.CardsNAME) LIKE LOWER('%{search_query}%') 
            OR LOWER(c.CardsAUTHOR) LIKE LOWER('%{search_query}%'))
            ORDER BY c.CardsID
        """)
    else:
        cards = await db.cmd(f"""
            SELECT c.* 
            FROM cards c
            JOIN my_cards mc ON c.CardsID = mc.CardsID
            WHERE mc.UserID = {callback.from_user.id}
            ORDER BY c.CardsID
        """)
    
    if not cards:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫", show_alert=True)
        return
        
    if page >= len(cards):
        page = 0  # Reset to first page if out of bounds
        
    info = {
        'CardsID': cards[page][0],
        'CardsStatus': cards[page][1],
        'CardsAUTHOR': cards[page][2],
        'CardsNAME': cards[page][3],
        'CardsURL': cards[page][4],
        'CardsDesc': cards[page][5] if len(cards[page]) > 5 else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    }
    
    my_cards = InlineKeyboardBuilder()
    my_cards.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data=f"cards_page:{page}:{user_id}")
    my_cards.button(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å –∫–∞—Ä—Ç—É –±–æ—Ç—É", callback_data=f"confirm_sell:{info['CardsID']}:{page}:{user_id}:{search_query if search_query else ''}:{info['CardsAUTHOR']}:{info['CardsNAME']}")
    my_cards.adjust(1)
    
    card_text = f"üíø {info['CardsAUTHOR']} - {info['CardsNAME']}\n\n"
    card_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{info['CardsDesc']}\n\n"
    card_text += f"‚ú® –†–µ–¥–∫–æ—Å—Ç—å: {config.CardsStatus[info['CardsStatus']]['Emoji']} ({config.CardsStatus[info['CardsStatus']]['Ru-Name']})"
    
    await callback.message.delete()
    await callback.message.answer_photo(
        photo=info['CardsURL'],
        caption=card_text,
        reply_markup=my_cards.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_sell:"))
async def confirm_sell_handler(callback: types.CallbackQuery):
    data = callback.data.split(":")
    card_id = int(data[1])
    page = int(data[2])
    user_id = int(data[3])
    search_query = data[4] if data[4] else None
    author = data[5]
    name = data[6]
    
    if callback.from_user.id != user_id:
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        return

    confirm_kb = InlineKeyboardBuilder()
    confirm_kb.button(text="‚úÖ –î–∞, –ø—Ä–æ–¥–∞—Ç—å", callback_data=f"sell_to_bot:{card_id}:{page}:{user_id}:{search_query}")
    confirm_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"show_desc:{page}:{user_id}:{search_query if search_query else ''}")
    confirm_kb.adjust(2)

    await callback.message.edit_caption(
        caption=f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∫–∞—Ä—Ç—É {author} - {name}?",
        reply_markup=confirm_kb.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("sell_to_bot:"))
async def sell_to_bot_handler(callback: types.CallbackQuery):
    card_id = int(callback.data.split(":")[1])
    page = int(callback.data.split(":")[2])
    user_id = int(callback.data.split(":")[3])
    search_query = callback.data.split(":")[4] if len(callback.data.split(":")) > 4 else None
    
    if callback.from_user.id != user_id:
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
    card_info = await db.cmd(f"SELECT CardsStatus FROM cards WHERE CardsID = {card_id}")
    if not card_info:
        await callback.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity = card_info[0][0]
    prices = {
        'Common': 10,
        'Rare': 80,
        'Epic': 250,
        'Legendary': 3000
    }
    price = prices.get(rarity, 50)
    
    # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    await db.cmd(f"DELETE FROM my_cards WHERE UserID = {user_id} AND CardsID = {card_id}")
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await db.cmd(f"UPDATE users SET coins = coins + {price} WHERE UserID = {user_id}")
    
    await callback.message.delete()
    await callback.message.answer(
        text=f"""
üéâ <b>–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞!</b> üéâ

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username}
üí´ –°—Ç–∞—Ç—É—Å: <i>–ö–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–Ω–∞ –±–æ—Ç—É</i>
üí∞ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: <b>{price}</b>

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ü§ñ <i>–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–¥–µ–ª–∫—É!</i>
        """,
        reply_markup=InlineKeyboardBuilder().button(
            text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
            callback_data=f"cards_page:{page}:{user_id}"
        ).as_markup()
    )
    await callback.answer("‚ú® –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–∞!", show_alert=True)
