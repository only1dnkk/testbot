from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta
import random
from utils.sql import DateBase

router = Router()
db = DateBase()

class JobStates(StatesGroup):
    working = State()

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
JOB_EMOJIS = ["üéµ", "üéπ", "üéº"]

# –û–ø—ã—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
LEVEL_XP = {
    1: 0,
    2: 100,
    3: 300,
    4: 600,
    5: 1000,
    6: 1500,
    7: 2100,
    8: 2800,
    9: 3600,
    10: 4500
}

# –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
BASE_SALARY = 10
SALARY_MULTIPLIER = 1.5

@router.message(Command("work"))
async def job_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ my_job
    job_data = await db.cmd(f"SELECT last_work, xp, lvl FROM my_job WHERE UserID = {user_id}")
    
    if not job_data:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        await db.cmd(f"""
            INSERT INTO my_job (UserID, Username, xp, lvl)
            VALUES ({user_id}, '@{username}', 0, 1)
        """)
        job_data = [(None, 0, 1)]
    
    last_work = datetime.fromisoformat(job_data[0][0]) if job_data[0][0] else None
    
    if last_work and datetime.now() - last_work < timedelta(hours=4):
        remaining = timedelta(hours=4) - (datetime.now() - last_work)
        hours = remaining.seconds // 3600
        minutes = (remaining.seconds % 3600) // 60
        await message.reply(f"‚è≥ –í—ã —É—Å—Ç–∞–ª–∏! –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –µ—â—ë {hours}—á {minutes}–º–∏–Ω")
        return
        
    await start_work_shift(message, state)

async def start_work_shift(message: types.Message, state: FSMContext):
    current_step = 0
    
    kb = InlineKeyboardBuilder()
    correct_emoji = random.choice(JOB_EMOJIS)
    
    for emoji in JOB_EMOJIS:
        kb.button(text=emoji, callback_data=f"work:{emoji}:{current_step}:{correct_emoji}")
    kb.adjust(2)
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await db.cmd(f"SELECT lvl FROM my_job WHERE UserID = {message.from_user.id}")
    user_level = user_data[0][0] if user_data else 1
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è
    salary = int(BASE_SALARY * (SALARY_MULTIPLIER ** (user_level - 1)))
    
    await state.set_state(JobStates.working)
    await state.update_data(
        current_step=current_step,
        correct_emoji=correct_emoji,
        start_time=datetime.now().isoformat(),
        salary=salary
    )
    
    await message.reply(
        f"üìã –°–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ {correct_emoji}\n"
        f"üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {salary} –º–æ–Ω–µ—Ç –∑–∞ —Å–º–µ–Ω—É",
        reply_markup=kb.as_markup()
    )

@router.callback_query(JobStates.working)
async def work_process(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_emoji = callback.data.split(":")[1]
    current_step = int(callback.data.split(":")[2])
    correct_emoji = callback.data.split(":")[3]
    
    if selected_emoji != correct_emoji:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", show_alert=True)
        return
        
    current_step += 1
    if current_step >= 3:
        # –°–º–µ–Ω–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
        salary = data['salary']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç
        user_data = await db.cmd(f"SELECT xp, lvl FROM my_job WHERE UserID = {callback.from_user.id}")
        current_xp = user_data[0][0]
        current_level = user_data[0][1]
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç (20-50 –∑–∞ —Å–º–µ–Ω—É)
        xp_gain = random.randint(20, 50)
        new_xp = current_xp + xp_gain
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        new_level = current_level
        level_up_text = ""
        
        while new_level < 10 and new_xp >= LEVEL_XP[new_level + 1]:
            new_level += 1
            level_up_text = f"\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!"
        
        await db.cmd(f"""
            UPDATE my_job 
            SET xp = {new_xp},
                lvl = {new_level},
                last_work = '{datetime.now().isoformat()}'
            WHERE UserID = {callback.from_user.id}
        """)
        
        await state.clear()
        await callback.message.edit_text(
            f"‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {salary}üí∞\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: +{xp_gain}üìä"
            f"{level_up_text}"
        )
        return
        
    # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    kb = InlineKeyboardBuilder()
    new_correct_emoji = random.choice(JOB_EMOJIS)
    
    for emoji in JOB_EMOJIS:
        kb.button(text=emoji, callback_data=f"work:{emoji}:{current_step}:{new_correct_emoji}")
    kb.adjust(2)
    
    await state.update_data(current_step=current_step, correct_emoji=new_correct_emoji)
    await callback.message.edit_text(
        f"üìã –ù–∞–∂–º–∏—Ç–µ –Ω–∞ {new_correct_emoji}",
        reply_markup=kb.as_markup()
    )
