from aiogram import Router, F, types
from aiogram.filters import Command
from utils.sql import DateBase
from utils.ftl import GetFluentLocalization
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils import config

router = Router()
db = DateBase()
text = GetFluentLocalization('ru')

@router.message(Command("sendbug", ignore_case=True))
async def send_bug_command(message: types.Message):
    try:
        user = await db.get_user('users', message.from_user.id)
        if user == 'unregister':
            await db.cmd(f"INSERT INTO users (UserID, last_card_time) VALUES ({message.from_user.id}, NULL)")

        command_parts = message.text.split(' ', 1)
        if len(command_parts) < 2:
            await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –±–∞–≥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /sendbug")
            return
            
        bug_text = command_parts[1]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ
        preview_report = (
            "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–∏–∫–µ—Ç–∞:</b>\n\n"
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{message.from_user.username}\n"
            f"üìù –¢–µ–∫—Å—Ç: {bug_text}\n"
            f"üìÖ –î–∞—Ç–∞: {message.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üí≠ –ß–∞—Ç: {message.chat.title if message.chat.title else '–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_ticket:{message.from_user.id}:{message.message_id}:{bug_text}")
        kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"cancel_ticket:{message.from_user.id}")
        kb.adjust(2)
        
        await message.reply(
            text=preview_report,
            reply_markup=kb.as_markup()
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {str(e)}")

@router.callback_query(F.data.startswith("send_ticket:"))
async def send_ticket_handler(callback: types.CallbackQuery):
    try:
        data = callback.data.split(":")
        user_id = int(data[1])
        message_id = int(data[2])
        bug_text = data[3]
        
        if callback.from_user.id != user_id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à —Ç–∏–∫–µ—Ç!", show_alert=True)
            return
        
        bug_report = (
            "üêõ <b>–ù–∞–π–¥–µ–Ω –±–∞–≥!</b>\n\n"
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n"
            f"üìù –¢–µ–∫—Å—Ç: {bug_text}\n"
            f"üîó <a href='https://t.me/c/{str(callback.message.chat.id)[4:]}/{message_id}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</a>"
        )
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"accept_ticket:{user_id}")
        
        await callback.message.bot.send_message(
            chat_id=-1002416611310,
            text=bug_report,
            reply_markup=kb.as_markup()
        )
        
        await callback.message.edit_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=None
        )
        
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("cancel_ticket:"))
async def cancel_ticket_handler(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split(":")[1])
        
        if callback.from_user.id != user_id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à —Ç–∏–∫–µ—Ç!", show_alert=True)
            return
            
        await callback.message.edit_text(
            "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∏–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None
        )
        
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("accept_ticket:"))
async def accept_ticket_handler(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split(":")[1])
        
        kb = InlineKeyboardBuilder()
        kb.button(
            text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: @{callback.from_user.username}",
            callback_data="ticket_accepted"
        )
        
        await callback.message.edit_reply_markup(
            reply_markup=kb.as_markup()
        )
        
        await callback.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{callback.from_user.username} –ø—Ä–∏–Ω—è–ª –≤–∞—à —Ç–∏–∫–µ—Ç!"
        )
        
        await callback.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Ç–∏–∫–µ—Ç!")
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(Command("ans", ignore_case=True))
async def answer_to_user(message: types.Message):
    try:
        if message.from_user.id not in config.ADMINS:
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /ans @username —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        username = parts[1].replace("@", "")
        answer_text = parts[2]

        user_info = await db.cmd(f"SELECT UserID FROM users WHERE Username = '{username}' OR Username = '@{username}'")
        if not user_info:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        user_id = user_info[0][0]

        try:
            await message.bot.send_message(
                chat_id=user_id,
                text=f"üì® <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> @{message.from_user.username}:\n\n{answer_text}"
            )
            await message.reply("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
