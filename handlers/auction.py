from aiogram import types, Router
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import asyncio
from utils.sql import DateBase
from utils import config

router = Router()
db = DateBase()
active_auctions = {}  # {auction_id: {card_id, seller_id, current_price, end_time, highest_bidder}}

@router.message(lambda msg: msg.text.startswith('/createauction'))
async def create_auction(message: types.Message):
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É /createauction <card_id> <start_price> <duration_hours>
        args = message.text.split()[1:]
        if len(args) != 3:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createauction <ID –∫–∞—Ä—Ç—ã> <–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö>")
            return
            
        card_id = int(args[0])
        start_price = int(args[1])
        duration = int(args[2])
        
        if duration < 1 or duration > 48:
            await message.reply("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 48 —á–∞—Å–æ–≤")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π
        card = await db.cmd(f"""
            SELECT c.* FROM cards c
            JOIN my_cards mc ON c.CardsID = mc.CardsID
            WHERE mc.UserID = {message.from_user.id} AND c.CardsID = {card_id}
        """)
        
        if not card:
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç—ã!")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω
        auction_id = len(active_auctions) + 1
        end_time = datetime.now() + timedelta(hours=duration)
        
        active_auctions[auction_id] = {
            "card_id": card_id,
            "seller_id": message.from_user.id,
            "current_price": start_price,
            "end_time": end_time,
            "highest_bidder": None
        }
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É —É –ø—Ä–æ–¥–∞–≤—Ü–∞
        await db.cmd(f"""
            DELETE FROM my_cards 
            WHERE UserID = {message.from_user.id} AND CardsID = {card_id}
        """)
        
        card_info = card[0]
        await message.reply(
            f"üî® –°–æ–∑–¥–∞–Ω –∞—É–∫—Ü–∏–æ–Ω #{auction_id}\n"
            f"–ö–∞—Ä—Ç–∞: {card_info[2]} - {card_info[3]} ({card_info[1]})\n"
            f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {start_price} –º–æ–Ω–µ—Ç\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑: {duration} —á.\n\n"
            f"–î–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π:\n/auction {auction_id} <—Å—É–º–º–∞>"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è
        asyncio.create_task(end_auction(auction_id, message))
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–∫—Ü–∏–æ–Ω–∞")

@router.message(lambda msg: msg.text.startswith('/auction'))        
async def make_bet(message: types.Message):
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É /auction <auction_id> <bet>
        args = message.text.split()[1:]
        if len(args) != 2:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auction <ID –∞—É–∫—Ü–∏–æ–Ω–∞> <—Å—Ç–∞–≤–∫–∞>")
            return
            
        auction_id = int(args[0])
        bet = int(args[1])
        
        if auction_id not in active_auctions:
            await message.reply("‚ùå –ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return
            
        auction = active_auctions[auction_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ–¥–∞–≤–µ—Ü
        if message.from_user.id == auction["seller_id"]:
            await message.reply("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–≤–æ–π –∞—É–∫—Ü–∏–æ–Ω")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
        if bet <= auction["current_price"]:
            await message.reply(f"‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã ({auction['current_price']} –º–æ–Ω–µ—Ç)")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        user_balance = await db.cmd(f"SELECT coins FROM users WHERE UserID = {message.from_user.id}")
        if not user_balance or user_balance[0][0] < bet:
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
            return
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        if auction["highest_bidder"]:
            await db.cmd(f"""
                UPDATE users 
                SET coins = coins + {auction['current_price']}
                WHERE UserID = {auction['highest_bidder']}
            """)
            
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã —É –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await db.cmd(f"""
            UPDATE users 
            SET coins = coins - {bet}
            WHERE UserID = {message.from_user.id}
        """)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ
        auction["current_price"] = bet
        auction["highest_bidder"] = message.from_user.id
        
        await message.reply(f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {bet} –º–æ–Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç–∞!")
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–≤–∫–∏")
        
async def end_auction(auction_id: int, message: types.Message):
    auction = active_auctions[auction_id]
    await asyncio.sleep((auction["end_time"] - datetime.now()).total_seconds())
    
    if auction_id not in active_auctions:
        return
        
    if auction["highest_bidder"]:
        # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        await db.cmd(f"""
            INSERT INTO my_cards (UserID, CardsID)
            VALUES ({auction['highest_bidder']}, {auction['card_id']})
        """)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–Ω–µ—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü—É
        await db.cmd(f"""
            UPDATE users 
            SET coins = coins + {auction['current_price']}
            WHERE UserID = {auction['seller_id']}
        """)
        
        await message.bot.send_message(
            auction["seller_id"],
            f"üî® –ê—É–∫—Ü–∏–æ–Ω #{auction_id} –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"–ö–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–Ω–∞ –∑–∞ {auction['current_price']} –º–æ–Ω–µ—Ç"
        )
        
        await message.bot.send_message(
            auction["highest_bidder"],
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω #{auction_id}!\n"
            f"–ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é"
        )
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–æ–¥–∞–≤—Ü—É
        await db.cmd(f"""
            INSERT INTO my_cards (UserID, CardsID)
            VALUES ({auction['seller_id']}, {auction['card_id']})
        """)
        
        await message.bot.send_message(
            auction["seller_id"],
            f"‚ùå –ê—É–∫—Ü–∏–æ–Ω #{auction_id} –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫.\n"
            f"–ö–∞—Ä—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é"
        )
        
    del active_auctions[auction_id]
