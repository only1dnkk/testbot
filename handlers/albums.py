from aiogram import Router, F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from utils.sql import DateBase
from datetime import datetime

router = Router()
db = DateBase()

@router.message(Command("albums"))
async def check_albums_command(message: types.Message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–ª—å–±–æ–º—ã –∏–∑ album_list
    albums = await db.cmd("SELECT * FROM album_list")
    if not albums:
        await message.reply("üê∞ –§—Ä—Ä... –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤!")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_cards = await db.cmd(f"""
        SELECT CardsID FROM my_cards 
        WHERE UserID = {user_id}
    """)
    user_cards = [card[0] for card in user_cards] if user_cards else []
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞–ª—å–±–æ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    completed_albums = await db.cmd(f"""
        SELECT AlbumID FROM my_album 
        WHERE UserID = {user_id}
    """)
    completed_albums = [album[0] for album in completed_albums] if completed_albums else []
    
    albums_text = "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å–±–æ–º–æ–≤:\n\n"
    albums_changed = False
    
    for album in albums:
        album_id = album[0]
        album_name = album[1]
        album_author = album[2]
        required_cards = [int(card_id) for card_id in album[3].split(',')]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞—Ä—Ç
        missing_cards = [card_id for card_id in required_cards if card_id not in user_cards]
        
        if album_id in completed_albums and missing_cards:
            # –ï—Å–ª–∏ –∞–ª—å–±–æ–º –±—ã–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Ç–µ–ø–µ—Ä—å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–∞—Ä—Ç - –∑–∞–±–∏—Ä–∞–µ–º –µ–≥–æ
            await db.cmd(f"""
                DELETE FROM my_album 
                WHERE UserID = {user_id} AND AlbumID = {album_id}
            """)
            albums_text += f"‚ùå {album_author} - {album_name} (–ê–ª—å–±–æ–º –∏–∑—ä—è—Ç - –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–∞—Ä—Ç)\n"
            albums_changed = True
            completed_albums.remove(album_id)
        elif album_id in completed_albums:
            albums_text += f"‚úÖ {album_author} - {album_name} (–ü–æ–ª—É—á–µ–Ω)\n"
        elif not missing_cards:
            # –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –µ—Å—Ç—å - –≤—ã–¥–∞–µ–º –∞–ª—å–±–æ–º
            await db.cmd(f"""
                INSERT INTO my_album (UserID, AlbumID) 
                VALUES ({user_id}, {album_id})
            """)
            albums_text += f"üéâ {album_author} - {album_name} (–ù–æ–≤—ã–π!)\n"
            albums_changed = True
        else:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            cards_collected = len(required_cards) - len(missing_cards)
            progress = f"{cards_collected}/{len(required_cards)}"
            albums_text += f"üìù {album_author} - {album_name} ({progress})\n"
    
    if albums_changed:
        albums_text = "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞—à–∏—Ö –∞–ª—å–±–æ–º–∞—Ö!\n\n" + albums_text
    
    await message.reply(albums_text)
